from django.test import TestCase

from binance_api.serializers.serializers_input.account_serializer_input import AccountSerializerInput
from binance_api.serializers.serializers_input.balance_spot_serializer_input import BalanceSpotSerializerInput


class AccountSerializerInputTestCase(TestCase):

    def test_missing_required_fields(self):
        data = {}  # Missing all required fields
        required_fields = ['account', 'asset', 'free', 'locked', 'total']
        with self.assertRaises(AssertionError):
            serializer = BalanceSpotSerializerInput(data=data)
            self.assertFalse(serializer.is_valid())
            for field in required_fields:
                self.assertIn(field, serializer.errors)

    def test_valid_input_serialization(self):
        data = {
            'status': 'Normal',
            'maker_commission': 0.1,
            'taker_commission': 0.2,
            'buyer_commission': 0.3,
            'seller_commission': 0.4,
            'can_trade': True,
            'can_withdraw': False,
            'can_deposit': True,
            'ip_restrict': False,
            'enable_withdrawals': True,
            'enable_internal_transfer': False,
            'permits_universal_transfer': True,
            'enable_vanilla_options': False,
            'enable_reading': True,
            'enable_futures': False,
            'enable_margin': True,
            'enable_spot_and_margin_trade': False,
            'trading_authority_expiration_time': 1000
        }
        serializer = AccountSerializerInput(data=data)
        self.assertTrue(serializer.is_valid())

########## CODIUM-AI TESTS. ##########
# Generated by CodiumAI
# DO NOT EDIT THIS CODE BY HAND
# YOU CAN REGENERATE IT USING CodiumAI


class CodiumAIAccountSerializerInput(TestCase):
    #  Tests that all fields are valid when given correct input
    def test_valid_fields(self):
        data = {
            'status': 'Normal',
            'maker_commission': 0.001,
            'taker_commission': 0.001,
            'buyer_commission': 0.001,
            'seller_commission': 0.001,
            'can_trade': True,
            'can_withdraw': True,
            'can_deposit': True,
            'ip_restrict': True,
            'enable_withdrawals': True,
            'enable_internal_transfer': True,
            'permits_universal_transfer': True,
            'enable_vanilla_options': True,
            'enable_reading': True,
            'enable_futures': True,
            'enable_margin': True,
            'enable_spot_and_margin_trade': True,
            'trading_authority_expiration_time': 987654321
        }
        serializer = AccountSerializerInput(data=data)
        self.assertTrue(serializer.is_valid())

    #  Tests that all fields are required
    def test_required_fields(self):
        data = {}
        serializer = AccountSerializerInput(data=data)
        self.assertFalse(serializer.is_valid())
        self.assertEqual(set(serializer.errors.keys()), set(['status', 'maker_commission', 'taker_commission', 'buyer_commission', 'seller_commission', 'can_trade', 'can_withdraw', 'can_deposit', 'ip_restrict', 'enable_withdrawals', 'enable_internal_transfer', 'permits_universal_transfer', 'enable_vanilla_options', 'enable_reading', 'enable_futures', 'enable_margin', 'enable_spot_and_margin_trade']))

    #  Tests that all fields can be null
    def test_null_fields(self):
        data = {
            'status': None,
            'maker_commission': None,
            'taker_commission': None,
            'buyer_commission': None,
            'seller_commission': None,
            'can_trade': None,
            'can_withdraw': None,
            'can_deposit': None,
            'ip_restrict': None,
            'enable_withdrawals': None,
            'enable_internal_transfer': None,
            'permits_universal_transfer': None,
            'enable_vanilla_options': None,
            'enable_reading': None,
            'enable_futures': None,
            'enable_margin': None,
            'enable_spot_and_margin_trade': None,
            'trading_authority_expiration_time': None
        }
        serializer = AccountSerializerInput(data=data)
        self.assertFalse(serializer.is_valid())

    #  Tests that status field only accepts valid choices
    def test_valid_status_choices(self):
        data = {
            'status': 'Invalid',
            'maker_commission': 0.001,
            'taker_commission': 0.001,
            'buyer_commission': 0.001,
            'seller_commission': 0.001,
            'can_trade': True,
            'can_withdraw': True,
            'can_deposit': True,
            'ip_restrict': True,
            'enable_withdrawals': True,
            'enable_internal_transfer': True,
            'permits_universal_transfer': True,
            'enable_vanilla_options': True,
            'enable_reading': True,
            'enable_futures': True,
            'enable_margin': True,
            'enable_spot_and_margin_trade': True,
            'trading_authority_expiration_time': None
        }
        serializer = AccountSerializerInput(data=data)
        self.assertFalse(serializer.is_valid())
