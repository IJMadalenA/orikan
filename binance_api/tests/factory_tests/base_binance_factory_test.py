# Imported from Django:
from django.test import TestCase

from binance_api.factories import BaseBinanceFactory
from binance_api.models.base_binance_model import BaseBinanceModel


class BaseFactoryTestCase(TestCase):
    factory = None

    def test_factory_creation(self):
        model_created = self.factory()
        self.assertTrue(model_created.pk)
        self.assertTrue(self.factory._meta.model.objects.get(pk=model_created.pk))

    def test_factory_count(self):
        model_count_before = self.factory._meta.model.objects.count()

        self.factory.create_batch(5)

        model_count_after = self.factory._meta.model.objects.count()
        self.assertEqual(model_count_after, model_count_before + 5)


# Generated by CodiumAI

# Dependencies:
# pip install pytest-mock
import unittest

"""
Code Analysis

Main functionalities:
The BaseBinanceFactory class is a DjangoModelFactory that generates fake data for the BaseBinanceModel class. It creates instances of the BaseBinanceModel class with randomized values for the created_at and updated_at fields, and a unique ID generated by the generate_unique_id method.

Methods:
- generate_unique_id: a static method that generates a unique ID using the FuzzyText class from the factory.fuzzy module.
- Meta: a nested class that specifies the model to be used for the factory.

Fields:
- created_at: a FuzzyDateTime field that generates a random datetime object between January 1, 2020 and January 1, 2022, with UTC timezone.
- updated_at: a FuzzyDateTime field that generates a random datetime object between January 1, 2020 and January 1, 2022, with UTC timezone.
"""


class TestBaseBinanceFactory(unittest.TestCase):

    #  Tests that generate_unique_id returns a string of length 10
    def test_generate_unique_id_length(self):
        self.assertEqual(len(BaseBinanceFactory.generate_unique_id()), 10)

    #  Tests that generate_unique_id returns unique values
    def test_generate_unique_id_uniqueness(self):
        unique_ids = set()
        for i in range(100):
            unique_ids.add(BaseBinanceFactory.generate_unique_id())
        self.assertEqual(len(unique_ids), 100)

    #  Tests that BaseBinanceModel is correctly abstract
    def test_base_binance_model_abstract(self):
        with self.assertRaises(TypeError):
            BaseBinanceModel()

    #  Tests that generate_unique_id returns only digits
    def test_generate_unique_id_digits_only(self):
        unique_id = BaseBinanceFactory.generate_unique_id()
        self.assertTrue(unique_id.isdigit())
