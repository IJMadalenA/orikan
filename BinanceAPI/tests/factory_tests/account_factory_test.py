from BinanceAPI.factories.account_factory import AccountFactory

# Imported Models.
from BinanceAPI.tests.factory_tests.base_binance_factory_test import BaseFactoryTestCase


class AccountFactoryTestCase(BaseFactoryTestCase):
    factory = AccountFactory


# Generated by CodiumAI
import unittest


class TestAccountFactory(unittest.TestCase):
    #  Tests that AccountFactory can create an instance of Account with default values.
    def test_default_values(self):
        account = AccountFactory()
        self.assertIsNotNone(account.id)
        self.assertIsNotNone(account.created_at)
        self.assertIsNotNone(account.updated_at)
        self.assertIsNotNone(account.name)
        self.assertIsInstance(account.maker_commission, int)
        self.assertIsInstance(account.taker_commission, int)
        self.assertIsInstance(account.buyer_commission, int)
        self.assertIsInstance(account.seller_commission, int)
        self.assertIsInstance(account.can_trade, bool)
        self.assertIsInstance(account.can_withdraw, bool)
        self.assertIsInstance(account.can_deposit, bool)
        self.assertIsInstance(account.ip_restrict, bool)
        self.assertIsInstance(account.enable_withdrawals, bool)
        self.assertIsInstance(account.enable_internal_transfer, bool)
        self.assertIsInstance(account.permits_universal_transfer, bool)
        self.assertIsInstance(account.enable_vanilla_options, bool)
        self.assertIsInstance(account.enable_reading, bool)
        self.assertIsInstance(account.enable_futures, bool)
        self.assertIsInstance(account.enable_margin, bool)
        self.assertIsInstance(account.enable_spot_and_margin_trade, bool)
        self.assertIsNotNone(account.trading_authority_expiration_time)

    #  Tests that AccountFactory can create an instance of Account with custom values.
    def test_custom_values(self):
        account = AccountFactory(
            name='Test Account',
            status='INACTIVE',
            maker_commission=10,
            taker_commission=20,
            buyer_commission=30,
            seller_commission=40,
            can_trade=True,
            can_withdraw=False,
            can_deposit=True,
            ip_restrict=False,
            enable_withdrawals=True,
            enable_internal_transfer=False,
            permits_universal_transfer=True,
            enable_vanilla_options=False,
            enable_reading=True,
            enable_futures=False,
            enable_margin=True,
            enable_spot_and_margin_trade=False,
            trading_authority_expiration_time=1000
        )
        self.assertIsNotNone(account.id)
        self.assertIsNotNone(account.created_at)
        self.assertIsNotNone(account.updated_at)
        self.assertEqual(account.name, 'Test Account')
        self.assertEqual(account.status, 'INACTIVE')
        self.assertEqual(account.maker_commission, 10)
        self.assertEqual(account.taker_commission, 20)
        self.assertEqual(account.buyer_commission, 30)
        self.assertEqual(account.seller_commission, 40)
        self.assertTrue(account.can_trade)
        self.assertFalse(account.can_withdraw)
        self.assertTrue(account.can_deposit)
        self.assertFalse(account.ip_restrict)
        self.assertTrue(account.enable_withdrawals)
        self.assertFalse(account.enable_internal_transfer)
        self.assertTrue(account.permits_universal_transfer)
        self.assertFalse(account.enable_vanilla_options)
        self.assertTrue(account.enable_reading)
        self.assertFalse(account.enable_futures)
        self.assertTrue(account.enable_margin)
        self.assertFalse(account.enable_spot_and_margin_trade)
        self.assertEqual(account.trading_authority_expiration_time, 1000)

    #  Tests that AccountFactory can create multiple instances of Account with unique IDs.
    def test_unique_ids(self):
        ids = set()
        for i in range(10):
            account = AccountFactory()
            ids.add(account.id)
        self.assertEqual(len(ids), 10)

    #  Tests that AccountFactory can handle null values for optional fields.
    def test_null_values(self):
        account = AccountFactory(
            name=None,
            trading_authority_expiration_time=None
        )
        self.assertIsNone(account.name)
        self.assertIsNone(account.trading_authority_expiration_time)
