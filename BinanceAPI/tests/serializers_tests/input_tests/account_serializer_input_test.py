from django.test import TestCase

from BinanceAPI.serializers.serializers_input.account_serializer_input import AccountSerializerInput
from BinanceAPI.serializers.serializers_input.balance_spot_serializer_input import BalanceSpotSerializerInput


class AccountSerializerInputTestCase(TestCase):

    def test_missing_required_fields(self):
        data = {}  # Missing all required fields
        required_fields = ['account', 'asset', 'free', 'locked', 'total']
        with self.assertRaises(AssertionError):
            serializer = BalanceSpotSerializerInput(data=data)
            self.assertFalse(serializer.is_valid())
            for field in required_fields:
                self.assertIn(field, serializer.errors)

    def test_valid_input_serialization(self):
        data = {
            'status': 'Normal',
            'maker_commission': 0.1,
            'taker_commission': 0.2,
            'buyer_commission': 0.3,
            'seller_commission': 0.4,
            'can_trade': True,
            'can_withdraw': False,
            'can_deposit': True,
            'ip_restrict': False,
            'enable_withdrawals': True,
            'enable_internal_transfer': False,
            'permits_universal_transfer': True,
            'enable_vanilla_options': False,
            'enable_reading': True,
            'enable_futures': False,
            'enable_margin': True,
            'enable_spot_and_margin_trade': False,
            'trading_authority_expiration_time': 1000
        }
        serializer = AccountSerializerInput(data=data)
        self.assertTrue(serializer.is_valid())

########## CODIUM-AI TESTS. ##########
# Generated by CodiumAI
# DO NOT EDIT THIS CODE BY HAND
# YOU CAN REGENERATE IT USING CodiumAI
"""
Code Analysis

Main functionalities:
The AccountSerializerInput class is a ModelSerializer that defines the input fields for the Account model. It is used to validate and deserialize incoming data from external sources, such as API requests, and convert it into a format that can be saved to the database. The class defines the fields that are required for an Account object, including commission rates, trading and withdrawal permissions, and account status.

Methods:
- __str__: Returns the status of the account as a string.
- Meta: Defines the model and fields that the serializer is based on.

Fields:
- status: A ChoiceField that represents the status of the account.
- maker_commission: A DecimalField that represents the commission rate for makers.
- taker_commission: A DecimalField that represents the commission rate for takers.
- buyer_commission: A DecimalField that represents the commission rate for buyers.
- seller_commission: A DecimalField that represents the commission rate for sellers.
- can_trade: A BooleanField that indicates whether trading is allowed.
- can_withdraw: A BooleanField that indicates whether withdrawals are allowed.
- can_deposit: A BooleanField that indicates whether deposits are allowed.
- ip_restrict: A BooleanField that indicates whether IP restrictions are enabled.
- enable_withdrawals: A BooleanField that indicates whether withdrawals are enabled.
- enable_internal_transfer: A BooleanField that indicates whether internal transfers are enabled.
- permits_universal_transfer: A BooleanField that indicates whether universal transfers are permitted.
- enable_vanilla_options: A BooleanField that indicates whether vanilla options are enabled.
- enable_reading: A BooleanField that indicates whether reading is enabled.
- enable_futures: A BooleanField that indicates whether futures trading is enabled.
- enable_margin: A BooleanField that indicates whether margin trading is enabled.
- enable_spot_and_margin_trade: A BooleanField that indicates whether spot and margin trading is enabled.
- trading_authority_expiration_time: An IntegerField that represents the expiration time for trading authority.
"""


class CodiumAIAccountSerializerInput(TestCase):
    #  Tests that all fields are valid when given correct input
    def test_valid_fields(self):
        data = {
            'status': 'Normal',
            'maker_commission': 0.001,
            'taker_commission': 0.001,
            'buyer_commission': 0.001,
            'seller_commission': 0.001,
            'can_trade': True,
            'can_withdraw': True,
            'can_deposit': True,
            'ip_restrict': True,
            'enable_withdrawals': True,
            'enable_internal_transfer': True,
            'permits_universal_transfer': True,
            'enable_vanilla_options': True,
            'enable_reading': True,
            'enable_futures': True,
            'enable_margin': True,
            'enable_spot_and_margin_trade': True,
            'trading_authority_expiration_time': 987654321
        }
        serializer = AccountSerializerInput(data=data)
        self.assertTrue(serializer.is_valid())

    #  Tests that all fields are required
    def test_required_fields(self):
        data = {}
        serializer = AccountSerializerInput(data=data)
        self.assertFalse(serializer.is_valid())
        self.assertEqual(set(serializer.errors.keys()), set(['status', 'maker_commission', 'taker_commission', 'buyer_commission', 'seller_commission', 'can_trade', 'can_withdraw', 'can_deposit', 'ip_restrict', 'enable_withdrawals', 'enable_internal_transfer', 'permits_universal_transfer', 'enable_vanilla_options', 'enable_reading', 'enable_futures', 'enable_margin', 'enable_spot_and_margin_trade']))

    #  Tests that all fields can be null
    def test_null_fields(self):
        data = {
            'status': None,
            'maker_commission': None,
            'taker_commission': None,
            'buyer_commission': None,
            'seller_commission': None,
            'can_trade': None,
            'can_withdraw': None,
            'can_deposit': None,
            'ip_restrict': None,
            'enable_withdrawals': None,
            'enable_internal_transfer': None,
            'permits_universal_transfer': None,
            'enable_vanilla_options': None,
            'enable_reading': None,
            'enable_futures': None,
            'enable_margin': None,
            'enable_spot_and_margin_trade': None,
            'trading_authority_expiration_time': None
        }
        serializer = AccountSerializerInput(data=data)
        self.assertFalse(serializer.is_valid())

    #  Tests that status field only accepts valid choices
    def test_valid_status_choices(self):
        data = {
            'status': 'Invalid',
            'maker_commission': 0.001,
            'taker_commission': 0.001,
            'buyer_commission': 0.001,
            'seller_commission': 0.001,
            'can_trade': True,
            'can_withdraw': True,
            'can_deposit': True,
            'ip_restrict': True,
            'enable_withdrawals': True,
            'enable_internal_transfer': True,
            'permits_universal_transfer': True,
            'enable_vanilla_options': True,
            'enable_reading': True,
            'enable_futures': True,
            'enable_margin': True,
            'enable_spot_and_margin_trade': True,
            'trading_authority_expiration_time': None
        }
        serializer = AccountSerializerInput(data=data)
        self.assertFalse(serializer.is_valid())

