# Generated by Django 4.2.1 on 2023-07-20 07:40

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Nombre de la cuenta.",
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("Normal", "Normal"), ("INACTIVE", "Inactive")],
                        default="ACTIVE",
                        help_text="Estado de la cuenta.",
                        max_length=8,
                    ),
                ),
                (
                    "maker_commission",
                    models.PositiveIntegerField(help_text="Comisión de maker."),
                ),
                (
                    "taker_commission",
                    models.PositiveIntegerField(help_text="Comisión de taker."),
                ),
                (
                    "buyer_commission",
                    models.PositiveIntegerField(help_text="Comisión de comprador."),
                ),
                (
                    "seller_commission",
                    models.PositiveIntegerField(help_text="Comisión de vendedor."),
                ),
                ("can_trade", models.BooleanField(help_text="Puede hacer trading.")),
                ("can_withdraw", models.BooleanField(help_text="Puede hacer retiros.")),
                (
                    "can_deposit",
                    models.BooleanField(help_text="Puede hacer depósitos."),
                ),
                ("ip_restrict", models.BooleanField(help_text="IP restringida.")),
                (
                    "enable_withdrawals",
                    models.BooleanField(help_text="La API puede hacer retiros."),
                ),
                (
                    "enable_internal_transfer",
                    models.BooleanField(
                        help_text="La API puede hacer transacciones internas."
                    ),
                ),
                (
                    "permits_universal_transfer",
                    models.BooleanField(
                        help_text="La API puede hacer transacciones universales"
                    ),
                ),
                (
                    "enable_vanilla_options",
                    models.BooleanField(
                        help_text="La API puede hacer transacciones universales"
                    ),
                ),
                (
                    "enable_reading",
                    models.BooleanField(help_text="La API puede leer información"),
                ),
                (
                    "enable_futures",
                    models.BooleanField(
                        help_text="La API puede hacer transacciones con futuros"
                    ),
                ),
                (
                    "enable_margin",
                    models.BooleanField(
                        help_text="La API puede hacer transacciones con margenes"
                    ),
                ),
                (
                    "enable_spot_and_margin_trade",
                    models.BooleanField(
                        help_text="La API puede hacer transacciones con spots y margenes"
                    ),
                ),
                (
                    "trading_authority_expiration_time",
                    models.PositiveBigIntegerField(
                        blank=True,
                        help_text="Fecha de expiración de la autorizacíon de la API",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Account",
                "verbose_name_plural": "Accounts",
            },
        ),
        migrations.CreateModel(
            name="Asset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "acronym",
                    models.CharField(
                        db_index=True,
                        editable=False,
                        help_text="Símbolo del par de trading",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        editable=False, help_text="Nombre del activo.", max_length=20
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Descripción del activo.", null=True
                    ),
                ),
                (
                    "min_withdraw_amount",
                    models.DecimalField(
                        decimal_places=10,
                        help_text="Cantidad mínima para retirar.",
                        max_digits=20,
                    ),
                ),
                (
                    "deposit_status",
                    models.BooleanField(help_text="Estado de depósito."),
                ),
                (
                    "withdraw_fee",
                    models.DecimalField(
                        decimal_places=10,
                        help_text="Comisión de retiro.",
                        max_digits=20,
                    ),
                ),
                ("withdraw_status", models.BooleanField(help_text="Estado de retiro.")),
                (
                    "deposit_tip",
                    models.TextField(
                        blank=True, help_text="Consejo de depósito.", null=True
                    ),
                ),
                (
                    "deposit_all_enable",
                    models.BooleanField(
                        default=False, help_text="Depósito habilitado."
                    ),
                ),
                (
                    "withdraw_all_enable",
                    models.BooleanField(default=False, help_text="Retiro habilitado."),
                ),
                (
                    "free",
                    models.DecimalField(
                        decimal_places=10,
                        default=0,
                        help_text="Cantidad libre.",
                        max_digits=20,
                    ),
                ),
                (
                    "locked",
                    models.DecimalField(
                        decimal_places=10,
                        default=0,
                        help_text="Cantidad bloqueada.",
                        max_digits=20,
                    ),
                ),
                (
                    "freeze",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        help_text="Cantidad congelada.",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "withdrawing",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        help_text="Cantidad retirada.",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "ipoing",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        help_text="Cantidad en IPO.",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "ipoable",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        default=0,
                        help_text="Cantidad en IPO.",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "storage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        default=0,
                        help_text="Cantidad en almacenamiento.",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "is_legal_money",
                    models.BooleanField(default=False, help_text="Es dinero legal."),
                ),
                (
                    "trading",
                    models.BooleanField(default=False, help_text="En trading."),
                ),
            ],
            options={
                "verbose_name": "Activo",
                "verbose_name_plural": "Activos",
                "ordering": ["acronym"],
            },
        ),
        migrations.CreateModel(
            name="Symbol",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "symbol",
                    models.CharField(
                        db_index=True,
                        editable=False,
                        help_text="Símbolo del par de trading",
                        max_length=8,
                        unique=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        editable=False,
                        help_text="Estado del par de trading",
                        max_length=10,
                    ),
                ),
                (
                    "base_asset_precision",
                    models.IntegerField(
                        editable=False, help_text="Precisión del activo base"
                    ),
                ),
                (
                    "quote_asset_precision",
                    models.IntegerField(
                        editable=False, help_text="Precisión del activo de cotización"
                    ),
                ),
                (
                    "order_types",
                    models.CharField(
                        editable=False,
                        help_text="Tipos de ordenes permitidas",
                        max_length=100,
                    ),
                ),
                (
                    "iceberg_allowed",
                    models.BooleanField(
                        editable=False, help_text="Permite ordenes iceberg"
                    ),
                ),
                (
                    "base_asset",
                    models.ForeignKey(
                        editable=False,
                        help_text="Activo base.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="base_asset",
                        related_query_name="base_asset",
                        to="BinanceAPI.asset",
                    ),
                ),
                (
                    "quote_asset",
                    models.ForeignKey(
                        editable=False,
                        help_text="Activo de cotización.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quote_asset",
                        related_query_name="quote_asset",
                        to="BinanceAPI.asset",
                    ),
                ),
            ],
            options={
                "verbose_name": "Symbol",
                "verbose_name_plural": "Symbols",
                "ordering": ["symbol"],
            },
        ),
        migrations.CreateModel(
            name="Ticker",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio actual",
                        max_digits=20,
                    ),
                ),
                (
                    "price_change",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Cambio de precio en 24 horas",
                        max_digits=20,
                    ),
                ),
                (
                    "price_change_percent",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Porcentaje de cambio de precio en 24 horas",
                        max_digits=20,
                    ),
                ),
                (
                    "weighted_avg_price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio promedio ponderado",
                        max_digits=20,
                    ),
                ),
                (
                    "prev_close_price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio de cierre anterior",
                        max_digits=20,
                    ),
                ),
                (
                    "last_price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Último precio",
                        max_digits=20,
                    ),
                ),
                (
                    "bid_price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio de oferta",
                        max_digits=20,
                    ),
                ),
                (
                    "ask_price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio de demanda",
                        max_digits=20,
                    ),
                ),
                (
                    "open_price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio de apertura",
                        max_digits=20,
                    ),
                ),
                (
                    "high_price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio máximo",
                        max_digits=20,
                    ),
                ),
                (
                    "low_price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio mínimo",
                        max_digits=20,
                    ),
                ),
                (
                    "volume",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Volumen",
                        max_digits=20,
                    ),
                ),
                (
                    "open_time",
                    models.IntegerField(
                        editable=False, help_text="Marca de tiempo de apertura"
                    ),
                ),
                (
                    "close_time",
                    models.IntegerField(
                        editable=False, help_text="Marca de tiempo de cierre"
                    ),
                ),
                (
                    "first_trade_id",
                    models.IntegerField(
                        editable=False, help_text="ID de la primera operación"
                    ),
                ),
                (
                    "last_trade_id",
                    models.IntegerField(
                        editable=False, help_text="ID de la última operación"
                    ),
                ),
                (
                    "trade_count",
                    models.IntegerField(
                        editable=False, help_text="Número de operaciones"
                    ),
                ),
                (
                    "maker_commission",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Comisión de maker",
                        max_digits=20,
                    ),
                ),
                (
                    "taker_commission",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Comisión de taker",
                        max_digits=20,
                    ),
                ),
                (
                    "symbol",
                    models.ForeignKey(
                        editable=False,
                        help_text="Par de trading",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ticker",
                        related_query_name="ticker",
                        to="BinanceAPI.symbol",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ticker",
                "verbose_name_plural": "Tickers",
                "ordering": ["symbol"],
            },
        ),
        migrations.CreateModel(
            name="Network",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "network",
                    models.CharField(help_text="Nombre de la red.", max_length=50),
                ),
                (
                    "entity_tag",
                    models.CharField(
                        blank=True,
                        help_text="Etiqueta de entidad.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "withdraw_integer_multiple",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        help_text="Múltiplo entero de retiro.",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "is_default",
                    models.BooleanField(default=False, help_text="Red por defecto."),
                ),
                (
                    "deposit_enable",
                    models.BooleanField(
                        default=False, help_text="Depósito habilitado."
                    ),
                ),
                (
                    "withdraw_enable",
                    models.BooleanField(default=False, help_text="Retiro habilitado."),
                ),
                (
                    "deposit_desc",
                    models.TextField(
                        blank=True, help_text="Descripción de depósito.", null=True
                    ),
                ),
                (
                    "withdraw_desc",
                    models.TextField(
                        blank=True, help_text="Descripción de retiro.", null=True
                    ),
                ),
                (
                    "special_tips",
                    models.TextField(
                        blank=True, help_text="Tips especiales.", null=True
                    ),
                ),
                (
                    "special_withdraw_tips",
                    models.TextField(
                        blank=True, help_text="Tips especiales de retiro.", null=True
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Nombre de la red.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "reset_address_status",
                    models.BooleanField(
                        default=False, help_text="Estado de reinicio de dirección."
                    ),
                ),
                (
                    "address_regex",
                    models.CharField(
                        blank=True,
                        help_text="Expresión regular de dirección.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "address_rule",
                    models.CharField(
                        blank=True,
                        help_text="Regla de dirección.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "memo_regex",
                    models.CharField(
                        blank=True,
                        help_text="Expresión regular de memo.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "withdraw_fee",
                    models.DecimalField(
                        decimal_places=15,
                        help_text="Comisión de retiro.",
                        max_digits=35,
                    ),
                ),
                (
                    "withdraw_min",
                    models.DecimalField(
                        decimal_places=15,
                        help_text="Cantidad mínima de retiro.",
                        max_digits=35,
                    ),
                ),
                (
                    "withdraw_max",
                    models.DecimalField(
                        decimal_places=15,
                        help_text="Cantidad máxima de retiro.",
                        max_digits=35,
                    ),
                ),
                (
                    "min_confirm",
                    models.PositiveIntegerField(help_text="Confirmación mínima."),
                ),
                (
                    "unlock_confirm",
                    models.PositiveIntegerField(
                        help_text="Confirmación de desbloqueo."
                    ),
                ),
                (
                    "same_address",
                    models.BooleanField(default=False, help_text="Misma dirección."),
                ),
                (
                    "estimate_arrival_time",
                    models.PositiveIntegerField(
                        help_text="Tiempo estimado de llegada."
                    ),
                ),
                ("busy", models.BooleanField(default=False, help_text="Ocupado.")),
                (
                    "country",
                    models.CharField(
                        blank=True, help_text="País.", max_length=50, null=True
                    ),
                ),
                (
                    "contract_address_url",
                    models.URLField(
                        blank=True,
                        help_text="Dirección de contrato.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "contract_address",
                    models.CharField(
                        blank=True,
                        help_text="Dirección de contrato.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "coin",
                    models.ForeignKey(
                        blank=True,
                        help_text="Asset al que pertenece este Network.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="networks",
                        related_query_name="network",
                        to="BinanceAPI.asset",
                    ),
                ),
            ],
            options={
                "verbose_name": "Network",
                "verbose_name_plural": "Networks",
            },
        ),
        migrations.CreateModel(
            name="BalanceSpot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "free",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Cantidad disponible",
                        max_digits=20,
                    ),
                ),
                (
                    "locked",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Cantidad bloqueada",
                        max_digits=20,
                    ),
                ),
                (
                    "total",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Cantidad total (free + locked)",
                        max_digits=20,
                    ),
                ),
                (
                    "in_order",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Cantidad en órdenes abiertas",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "asset",
                    models.ForeignKey(
                        editable=False,
                        help_text="Activo",
                        max_length=10,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="BinanceAPI.asset",
                    ),
                ),
            ],
            options={
                "verbose_name": "Balance Spot",
                "verbose_name_plural": "Balances Spot",
            },
        ),
        migrations.AddConstraint(
            model_name="network",
            constraint=models.UniqueConstraint(
                fields=("network", "coin", "name"), name="unique_network_coin"
            ),
        ),
    ]
