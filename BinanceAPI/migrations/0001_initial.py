# Generated by Django 4.2.1 on 2023-07-25 12:50

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Nombre de la cuenta.",
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("Normal", "Normal"), ("INACTIVE", "Inactive")],
                        default="ACTIVE",
                        help_text="Estado de la cuenta.",
                        max_length=8,
                    ),
                ),
                (
                    "maker_commission",
                    models.PositiveIntegerField(help_text="Comisión de maker."),
                ),
                (
                    "taker_commission",
                    models.PositiveIntegerField(help_text="Comisión de taker."),
                ),
                (
                    "buyer_commission",
                    models.PositiveIntegerField(help_text="Comisión de comprador."),
                ),
                (
                    "seller_commission",
                    models.PositiveIntegerField(help_text="Comisión de vendedor."),
                ),
                ("can_trade", models.BooleanField(help_text="Puede hacer trading.")),
                ("can_withdraw", models.BooleanField(help_text="Puede hacer retiros.")),
                (
                    "can_deposit",
                    models.BooleanField(help_text="Puede hacer depósitos."),
                ),
                ("ip_restrict", models.BooleanField(help_text="IP restringida.")),
                (
                    "enable_withdrawals",
                    models.BooleanField(help_text="La API puede hacer retiros."),
                ),
                (
                    "enable_internal_transfer",
                    models.BooleanField(
                        help_text="La API puede hacer transacciones internas."
                    ),
                ),
                (
                    "permits_universal_transfer",
                    models.BooleanField(
                        help_text="La API puede hacer transacciones universales"
                    ),
                ),
                (
                    "enable_vanilla_options",
                    models.BooleanField(
                        help_text="La API puede hacer transacciones universales"
                    ),
                ),
                (
                    "enable_reading",
                    models.BooleanField(help_text="La API puede leer información"),
                ),
                (
                    "enable_futures",
                    models.BooleanField(
                        help_text="La API puede hacer transacciones con futuros"
                    ),
                ),
                (
                    "enable_margin",
                    models.BooleanField(
                        help_text="La API puede hacer transacciones con margenes"
                    ),
                ),
                (
                    "enable_spot_and_margin_trade",
                    models.BooleanField(
                        help_text="La API puede hacer transacciones con spots y margenes"
                    ),
                ),
                (
                    "trading_authority_expiration_time",
                    models.PositiveBigIntegerField(
                        blank=True,
                        help_text="Fecha de expiración de la autorizacíon de la API",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Account",
                "verbose_name_plural": "Accounts",
            },
        ),
        migrations.CreateModel(
            name="Asset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "acronym",
                    models.CharField(
                        db_index=True,
                        editable=False,
                        help_text="Símbolo del par de trading",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        editable=False, help_text="Nombre del activo.", max_length=20
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Descripción del activo.", null=True
                    ),
                ),
                (
                    "min_withdraw_amount",
                    models.DecimalField(
                        decimal_places=10,
                        help_text="Cantidad mínima para retirar.",
                        max_digits=20,
                    ),
                ),
                (
                    "deposit_status",
                    models.BooleanField(help_text="Estado de depósito."),
                ),
                (
                    "withdraw_fee",
                    models.DecimalField(
                        decimal_places=10,
                        help_text="Comisión de retiro.",
                        max_digits=20,
                    ),
                ),
                ("withdraw_status", models.BooleanField(help_text="Estado de retiro.")),
                (
                    "deposit_tip",
                    models.TextField(
                        blank=True, help_text="Consejo de depósito.", null=True
                    ),
                ),
                (
                    "deposit_all_enable",
                    models.BooleanField(
                        default=False, help_text="Depósito habilitado."
                    ),
                ),
                (
                    "withdraw_all_enable",
                    models.BooleanField(default=False, help_text="Retiro habilitado."),
                ),
                (
                    "free",
                    models.DecimalField(
                        decimal_places=10,
                        default=0,
                        help_text="Cantidad libre.",
                        max_digits=20,
                    ),
                ),
                (
                    "locked",
                    models.DecimalField(
                        decimal_places=10,
                        default=0,
                        help_text="Cantidad bloqueada.",
                        max_digits=20,
                    ),
                ),
                (
                    "freeze",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        help_text="Cantidad congelada.",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "withdrawing",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        help_text="Cantidad retirada.",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "ipoing",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        help_text="Cantidad en IPO.",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "ipoable",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        default=0,
                        help_text="Cantidad en IPO.",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "storage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        default=0,
                        help_text="Cantidad en almacenamiento.",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "is_legal_money",
                    models.BooleanField(default=False, help_text="Es dinero legal."),
                ),
                (
                    "trading",
                    models.BooleanField(default=False, help_text="En trading."),
                ),
            ],
            options={
                "verbose_name": "Activo",
                "verbose_name_plural": "Activos",
                "ordering": ["acronym"],
            },
        ),
        migrations.CreateModel(
            name="BaseFilter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "filter_type",
                    models.CharField(
                        choices=[
                            ("PRICE_FILTER", "PRICE_FILTER"),
                            ("PERCENT_PRICE", "PERCENT_PRICE"),
                            ("PERCENT_PRICE_BY_SIDE", "PERCENT_PRICE_BY_SIDE"),
                            ("LOT_SIZE", "LOT_SIZE"),
                            ("MIN_NOTIONAL", "MIN_NOTIONAL"),
                            ("NOTIONAL", "NOTIONAL"),
                            ("ICEBERG_PARTS", "ICEBERG_PARTS"),
                            ("MARKET_LOT_SIZE", "MARKET_LOT_SIZE"),
                            ("MAX_NUM_ORDERS", "MAX_NUM_ORDERS"),
                            ("MAX_NUM_ALGO_ORDERS", "MAX_NUM_ALGO_ORDERS"),
                            ("MAX_NUM_ICEBERG_ORDERS", "MAX_NUM_ICEBERG_ORDERS"),
                            ("MAX_POSITION", "MAX_POSITION"),
                            ("TRAILING_DELTA", "TRAILING_DELTA"),
                            ("EXCHANGE_MAX_NUM_ORDERS", "EXCHANGE_MAX_NUM_ORDERS"),
                            ("EXCHANGE_MAX_ALGO_ORDERS", "EXCHANGE_MAX_ALGO_ORDERS"),
                            (
                                "EXCHANGE_MAX_NUM_ICEBERG_ORDERS",
                                "EXCHANGE_MAX_NUM_ICEBERG_ORDERS",
                            ),
                        ],
                        help_text="Tipo de filtro",
                        max_length=35,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Deposit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "deposit_id",
                    models.CharField(
                        editable=False,
                        help_text="ID de depósito",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Cantidad depositada",
                        max_digits=20,
                    ),
                ),
                (
                    "asset",
                    models.CharField(editable=False, help_text="Activo", max_length=10),
                ),
                (
                    "address",
                    models.CharField(
                        editable=False,
                        help_text="Dirección de depósito",
                        max_length=100,
                    ),
                ),
                (
                    "tx_id",
                    models.CharField(
                        blank=True,
                        editable=False,
                        help_text="ID de transacción",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("success", "Success"),
                            ("failed", "Failed"),
                        ],
                        editable=False,
                        help_text="Estado del depósito",
                        max_length=10,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        editable=False, help_text="Fecha y hora del depósito"
                    ),
                ),
                (
                    "confirmations",
                    models.IntegerField(
                        blank=True,
                        editable=False,
                        help_text="Número de confirmaciones",
                        null=True,
                    ),
                ),
                (
                    "fee",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Tarifa de depósito",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "tx_hash",
                    models.CharField(
                        blank=True,
                        editable=False,
                        help_text="Hash de la transacción",
                        max_length=100,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Deposit",
                "verbose_name_plural": "Deposits",
            },
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "asset",
                    models.CharField(
                        editable=False,
                        help_text="Símbolo del activo",
                        max_length=10,
                        verbose_name="symbolo del activo",
                    ),
                ),
                (
                    "order_id",
                    models.CharField(
                        db_index=True,
                        editable=False,
                        help_text="ID de la orden",
                        max_length=50,
                        unique=True,
                        verbose_name="ID de la orden",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio de la orden",
                        max_digits=20,
                        verbose_name="Precio de la orden",
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Cantidad de activos",
                        max_digits=20,
                        verbose_name="Cantidad de activos",
                    ),
                ),
                (
                    "side",
                    models.CharField(
                        choices=[("BUY", "Buy"), ("SELL", "Sell")],
                        editable=False,
                        help_text="Lado de la orden",
                        max_length=4,
                        verbose_name="Laso de la orden",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("FILLED", "Filled"),
                            ("CANCELED", "Canceled"),
                        ],
                        editable=False,
                        help_text="Estado de la orden",
                        max_length=8,
                        verbose_name="Estado de la orden",
                    ),
                ),
            ],
            options={
                "verbose_name": "Order",
                "verbose_name_plural": "Orders",
            },
        ),
        migrations.CreateModel(
            name="Symbol",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "symbol",
                    models.CharField(
                        db_index=True,
                        editable=False,
                        help_text="Símbolo del par de trading",
                        max_length=8,
                        unique=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        editable=False,
                        help_text="Estado del par de trading",
                        max_length=10,
                    ),
                ),
                (
                    "base_asset_precision",
                    models.IntegerField(
                        editable=False, help_text="Precisión del activo base"
                    ),
                ),
                (
                    "quote_asset_precision",
                    models.IntegerField(
                        editable=False, help_text="Precisión del activo de cotización"
                    ),
                ),
                (
                    "order_types",
                    models.CharField(
                        editable=False,
                        help_text="Tipos de ordenes permitidas",
                        max_length=100,
                    ),
                ),
                (
                    "iceberg_allowed",
                    models.BooleanField(
                        editable=False, help_text="Permite ordenes iceberg"
                    ),
                ),
                (
                    "base_asset",
                    models.ForeignKey(
                        editable=False,
                        help_text="Activo base.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="base_asset",
                        related_query_name="base_asset",
                        to="BinanceAPI.asset",
                    ),
                ),
                (
                    "quote_asset",
                    models.ForeignKey(
                        editable=False,
                        help_text="Activo de cotización.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quote_asset",
                        related_query_name="quote_asset",
                        to="BinanceAPI.asset",
                    ),
                ),
            ],
            options={
                "verbose_name": "Symbol",
                "verbose_name_plural": "Symbols",
                "ordering": ["symbol"],
            },
        ),
        migrations.CreateModel(
            name="Trade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "trade_id",
                    models.CharField(
                        editable=False,
                        help_text="ID de la operación",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "asset",
                    models.CharField(
                        editable=False, help_text="Símbolo de trading", max_length=20
                    ),
                ),
                (
                    "side",
                    models.CharField(
                        choices=[("BUY", "Buy"), ("SELL", "Sell")],
                        editable=False,
                        help_text="Lado de la operación (compra/venta)",
                        max_length=4,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio de la operación",
                        max_digits=20,
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Cantidad de la operación",
                        max_digits=20,
                    ),
                ),
                (
                    "fee",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Comisión de la operación",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        editable=False, help_text="Fecha y hora de la operación"
                    ),
                ),
                (
                    "is_maker",
                    models.BooleanField(
                        editable=False,
                        help_text="Indica si la operación fue creada por el maker",
                    ),
                ),
                (
                    "is_buyer",
                    models.BooleanField(
                        editable=False, help_text="Indica si el usuario es el comprador"
                    ),
                ),
                (
                    "commission_asset",
                    models.CharField(
                        blank=True,
                        editable=False,
                        help_text="Símbolo de la comisión",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "commission",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Monto de la comisión",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "commission_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Tasa de comisión",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "buyer_fee",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Comisión del comprador",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "seller_fee",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Comisión del vendedor",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "trade_time",
                    models.BigIntegerField(
                        editable=False,
                        help_text="Tiempo de la operación en milisegundos",
                    ),
                ),
                (
                    "buyer_is_maker",
                    models.BooleanField(
                        editable=False, help_text="Indica si el comprador fue el maker"
                    ),
                ),
                (
                    "ignore",
                    models.BooleanField(
                        editable=False,
                        help_text="Indica si la operación debe ignorarse",
                    ),
                ),
            ],
            options={
                "verbose_name": "trade",
                "verbose_name_plural": "trades",
            },
        ),
        migrations.CreateModel(
            name="TradeHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "asset",
                    models.CharField(
                        editable=False,
                        help_text="El símbolo del par de trading.",
                        max_length=50,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        editable=False, help_text="La marca de tiempo de la operación."
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="El precio al que se realizó la operación.",
                        max_digits=20,
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="La cantidad negociada en la operación.",
                        max_digits=20,
                    ),
                ),
                (
                    "is_buyer_maker",
                    models.BooleanField(
                        default=True,
                        editable=False,
                        help_text="Indica si el comprador es el creador de la orden.",
                    ),
                ),
                (
                    "is_best_match",
                    models.BooleanField(
                        default=True,
                        editable=False,
                        help_text="Indica si esta operación es el último precio negociado del par.",
                    ),
                ),
                (
                    "is_ignored",
                    models.BooleanField(
                        default=True,
                        editable=False,
                        help_text="Indica si esta operación es ignorada en el historial.",
                    ),
                ),
            ],
            options={
                "verbose_name": "Trade History",
                "verbose_name_plural": "Trade Histories",
            },
        ),
        migrations.CreateModel(
            name="Wallet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "asset",
                    models.CharField(
                        choices=[("BTC", "Bitcoin"), ("ETH", "Ethereum")],
                        help_text="Activo de la cartera",
                        max_length=10,
                    ),
                ),
                (
                    "free",
                    models.DecimalField(
                        decimal_places=10, help_text="Saldo disponible", max_digits=20
                    ),
                ),
                (
                    "locked",
                    models.DecimalField(
                        decimal_places=10, help_text="Saldo bloqueado", max_digits=20
                    ),
                ),
                (
                    "total",
                    models.DecimalField(
                        decimal_places=10,
                        help_text="Saldo total (disponible + bloqueado)",
                        max_digits=20,
                    ),
                ),
            ],
            options={
                "verbose_name": "wallet",
                "verbose_name_plural": "wallets",
            },
        ),
        migrations.CreateModel(
            name="Withdrawal",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "withdrawal_id",
                    models.CharField(
                        db_index=True,
                        editable=False,
                        help_text="ID de retiro",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Cantidad retirada",
                        max_digits=20,
                    ),
                ),
                (
                    "asset",
                    models.CharField(editable=False, help_text="Activo", max_length=10),
                ),
                (
                    "address",
                    models.CharField(
                        editable=False, help_text="Dirección de retiro", max_length=100
                    ),
                ),
                (
                    "tx_id",
                    models.CharField(
                        blank=True,
                        editable=False,
                        help_text="ID de transacción",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("success", "Success"),
                            ("failed", "Failed"),
                        ],
                        editable=False,
                        help_text="Estado del retiro",
                        max_length=10,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        editable=False, help_text="Fecha y hora del retiro"
                    ),
                ),
                (
                    "fee",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Tarifa de retiro",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "tx_hash",
                    models.CharField(
                        blank=True,
                        editable=False,
                        help_text="Hash de la transacción",
                        max_length=100,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "withdrawal",
                "verbose_name_plural": "withdrawals",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="IcebergPartsFilter",
            fields=[
                (
                    "basefilter_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="BinanceAPI.basefilter",
                    ),
                ),
                (
                    "limit",
                    models.IntegerField(
                        blank=True, editable=False, help_text="Límite", null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "Filtro de Iceberg Parts",
                "verbose_name_plural": "Filtros de Iceberg Parts",
                "db_table": "iceberg_parts_filter",
            },
            bases=("BinanceAPI.basefilter",),
        ),
        migrations.CreateModel(
            name="LotSizeFilter",
            fields=[
                (
                    "basefilter_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="BinanceAPI.basefilter",
                    ),
                ),
                (
                    "min_qty",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Cantidad mínima",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "max_qty",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Cantidad máxima",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "step_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Tamaño del paso",
                        max_digits=20,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Filtro de Tamaño de Lote",
                "verbose_name_plural": "Filtros de Tamaño de Lote",
                "db_table": "lot_size_filter",
            },
            bases=("BinanceAPI.basefilter",),
        ),
        migrations.CreateModel(
            name="MarketLotSizeFilter",
            fields=[
                (
                    "basefilter_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="BinanceAPI.basefilter",
                    ),
                ),
                (
                    "min_qty",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Cantidad mínima",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "max_qty",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Cantidad máxima",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "step_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Tamaño del paso",
                        max_digits=20,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Filtro de Market Lot Size",
                "verbose_name_plural": "Filtros de Market Lot Size",
                "db_table": "market_lot_size_filter",
            },
            bases=("BinanceAPI.basefilter",),
        ),
        migrations.CreateModel(
            name="MaxNumAlgoOrdersFilter",
            fields=[
                (
                    "basefilter_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="BinanceAPI.basefilter",
                    ),
                ),
                (
                    "max_num_algo_orders",
                    models.IntegerField(
                        blank=True,
                        editable=False,
                        help_text="Máximo número de órdenes de Algo",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Filtro de Máximo Número de Órdenes de Algo",
                "verbose_name_plural": "Filtros de Máximo Número de Órdenes de Algo",
                "db_table": "max_num_algo_orders_filter",
            },
            bases=("BinanceAPI.basefilter",),
        ),
        migrations.CreateModel(
            name="MaxNumIcebergOrdersFilter",
            fields=[
                (
                    "basefilter_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="BinanceAPI.basefilter",
                    ),
                ),
                (
                    "max_num_iceberg_orders",
                    models.IntegerField(
                        blank=True,
                        editable=False,
                        help_text="Máximo número de órdenes de Iceberg",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Filtro de Máximo Número de Órdenes de Iceberg",
                "verbose_name_plural": "Filtros de Máximo Número de Órdenes de Iceberg",
                "db_table": "max_num_iceberg_orders_filter",
            },
            bases=("BinanceAPI.basefilter",),
        ),
        migrations.CreateModel(
            name="MaxPositionFilter",
            fields=[
                (
                    "basefilter_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="BinanceAPI.basefilter",
                    ),
                ),
                (
                    "max_position",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Posición máxima",
                        max_digits=20,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Filtro de Posición Máxima",
                "verbose_name_plural": "Filtros de Posición Máxima",
                "db_table": "max_position_filter",
            },
            bases=("BinanceAPI.basefilter",),
        ),
        migrations.CreateModel(
            name="MinNotionalFilter",
            fields=[
                (
                    "basefilter_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="BinanceAPI.basefilter",
                    ),
                ),
                (
                    "min_notional",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Mínimo notional",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "apply_to_market",
                    models.BooleanField(
                        default=False, editable=False, help_text="Aplicar al mercado"
                    ),
                ),
                (
                    "avg_price_mins",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Minutos de precio promedio",
                        max_digits=20,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Filtro de Mínimo Notional",
                "verbose_name_plural": "Filtros de Mínimo Notional",
                "db_table": "min_notional_filter",
            },
            bases=("BinanceAPI.basefilter",),
        ),
        migrations.CreateModel(
            name="NotionalFilter",
            fields=[
                (
                    "basefilter_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="BinanceAPI.basefilter",
                    ),
                ),
                (
                    "min_notional",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Mínimo notional",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "apply_min_to_market",
                    models.BooleanField(
                        default=False,
                        editable=False,
                        help_text="Aplicar mínimo al mercado",
                    ),
                ),
                (
                    "max_notional",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Máximo notional",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "apply_max_to_market",
                    models.BooleanField(
                        default=False, editable=False, help_text="Aplicar al mercado"
                    ),
                ),
                (
                    "avg_price_mins",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Minutos de precio promedio",
                        max_digits=20,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Filtro de Notional",
                "verbose_name_plural": "Filtros de Notional",
                "db_table": "notional_filter",
            },
            bases=("BinanceAPI.basefilter",),
        ),
        migrations.CreateModel(
            name="PercentPriceBySideFilter",
            fields=[
                (
                    "basefilter_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="BinanceAPI.basefilter",
                    ),
                ),
                (
                    "bid_multiplier_up",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Multiplicador de precio hacia arriba",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "bid_multiplier_down",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Multiplicador de precio hacia abajo",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "ask_multiplier_up",
                    models.IntegerField(
                        blank=True,
                        editable=False,
                        help_text="Multiplicador de precio hacia arriba",
                        null=True,
                    ),
                ),
                (
                    "ask_multiplier_down",
                    models.IntegerField(
                        blank=True,
                        editable=False,
                        help_text="Multiplicador de precio hacia abajo",
                        null=True,
                    ),
                ),
                (
                    "avg_price_mins",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Minutos de precio promedio",
                        max_digits=20,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Filtro de Porcentaje de Precio",
                "verbose_name_plural": "Filtros de Porcentaje de Precio",
                "db_table": "percent_price_by_side_filter",
            },
            bases=("BinanceAPI.basefilter",),
        ),
        migrations.CreateModel(
            name="PercentPriceFilter",
            fields=[
                (
                    "basefilter_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="BinanceAPI.basefilter",
                    ),
                ),
                (
                    "multiplier_up",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Multiplicador de precio hacia arriba",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "multiplier_down",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Multiplicador de precio hacia abajo",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "avg_price_mins",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Minutos de precio promedio",
                        max_digits=20,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Filtro de Porcentaje de Precio",
                "verbose_name_plural": "Filtros de Porcentaje de Precio",
                "db_table": "percent_price_filter",
            },
            bases=("BinanceAPI.basefilter",),
        ),
        migrations.CreateModel(
            name="PriceFilter",
            fields=[
                (
                    "basefilter_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="BinanceAPI.basefilter",
                    ),
                ),
                (
                    "min_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Precio mínimo",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "max_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Precio máximo",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "tick_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Tamaño del tick",
                        max_digits=20,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Filtro de Precio",
                "verbose_name_plural": "Filtros de Precio",
                "db_table": "price_filter",
            },
            bases=("BinanceAPI.basefilter",),
        ),
        migrations.CreateModel(
            name="TrailingDeltaFilter",
            fields=[
                (
                    "basefilter_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="BinanceAPI.basefilter",
                    ),
                ),
                (
                    "min_trailing_above_delta",
                    models.IntegerField(
                        blank=True,
                        editable=False,
                        help_text="Mínimo trailing delta",
                        null=True,
                    ),
                ),
                (
                    "max_trailing_above_delta",
                    models.IntegerField(
                        blank=True,
                        editable=False,
                        help_text="Máximo trailing delta",
                        null=True,
                    ),
                ),
                (
                    "min_trailing_below_delta",
                    models.IntegerField(
                        blank=True,
                        editable=False,
                        help_text="Mínimo trailing delta",
                        null=True,
                    ),
                ),
                (
                    "max_trailing_below_delta",
                    models.IntegerField(
                        blank=True,
                        editable=False,
                        help_text="Máximo trailing delta",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Filtro de Trailing Stop Percent",
                "verbose_name_plural": "Filtros de Trailing Stop Percent",
                "db_table": "trailing_stop_percent_filter",
            },
            bases=("BinanceAPI.basefilter",),
        ),
        migrations.CreateModel(
            name="Ticker",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "time_frame",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1s", "1s"),
                            ("1m", "1m"),
                            ("3m", "3m"),
                            ("5m", "5m"),
                            ("15m", "15m"),
                            ("30m", "30m"),
                            ("1h", "1h"),
                            ("2h", "2h"),
                            ("4h", "4h"),
                            ("6h", "6h"),
                            ("8h", "8h"),
                            ("12h", "12h"),
                            ("1d", "1d"),
                            ("3d", "3d"),
                            ("5d", "5d"),
                            ("1w", "1w"),
                            ("2w", "2w"),
                            ("3w", "3w"),
                            ("1M", "1M"),
                            ("3M", "3M"),
                            ("6M", "6M"),
                            ("1y", "1y"),
                        ],
                        editable=False,
                        help_text="Marco de tiempo de la vela",
                        max_length=3,
                        null=True,
                        verbose_name="Marco de tiempo de la vela",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio actual",
                        max_digits=20,
                    ),
                ),
                (
                    "price_change",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Cambio de precio en 24 horas",
                        max_digits=20,
                    ),
                ),
                (
                    "price_change_percent",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Porcentaje de cambio de precio en 24 horas",
                        max_digits=20,
                    ),
                ),
                (
                    "weighted_avg_price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio promedio ponderado",
                        max_digits=20,
                    ),
                ),
                (
                    "prev_close_price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio de cierre anterior",
                        max_digits=20,
                    ),
                ),
                (
                    "last_price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Último precio",
                        max_digits=20,
                    ),
                ),
                (
                    "bid_price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio de oferta",
                        max_digits=20,
                    ),
                ),
                (
                    "ask_price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio de demanda",
                        max_digits=20,
                    ),
                ),
                (
                    "open_price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio de apertura",
                        max_digits=20,
                    ),
                ),
                (
                    "high_price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio máximo",
                        max_digits=20,
                    ),
                ),
                (
                    "close_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Precio de cierre de la vela",
                        max_digits=20,
                        null=True,
                        verbose_name="Precio de cierre de la vela",
                    ),
                ),
                (
                    "adj_close_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Precio de cierre ajustado de la vela",
                        max_digits=20,
                        null=True,
                        verbose_name="Precio de cierre ajustado de la vela",
                    ),
                ),
                (
                    "low_price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio mínimo",
                        max_digits=20,
                    ),
                ),
                (
                    "volume",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Volumen",
                        max_digits=20,
                    ),
                ),
                (
                    "open_time",
                    models.DateTimeField(
                        editable=False,
                        help_text="Marca de tiempo de apertura",
                        verbose_name="Marca de tiempo de apertura",
                    ),
                ),
                (
                    "close_time",
                    models.DateTimeField(
                        editable=False,
                        help_text="Fecha y hora de cierre de la vela",
                        verbose_name="Fecha y hora de cierre de la vela",
                    ),
                ),
                (
                    "first_trade_id",
                    models.IntegerField(
                        editable=False, help_text="ID de la primera operación"
                    ),
                ),
                (
                    "last_trade_id",
                    models.IntegerField(
                        editable=False, help_text="ID de la última operación"
                    ),
                ),
                (
                    "trade_count",
                    models.IntegerField(
                        editable=False, help_text="Número de operaciones"
                    ),
                ),
                (
                    "maker_commission",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Comisión de maker",
                        max_digits=20,
                    ),
                ),
                (
                    "market_cap",
                    models.DecimalField(
                        decimal_places=2,
                        editable=False,
                        help_text="Capitalización de mercado",
                        max_digits=20,
                        verbose_name="Capitalización de mercado",
                    ),
                ),
                (
                    "taker_commission",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Comisión de taker",
                        max_digits=20,
                    ),
                ),
                (
                    "taker_buy_quote_asset_volume",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Volumen de trading de la vela",
                        max_digits=30,
                        null=True,
                        verbose_name="Volumen de trading de la vela",
                    ),
                ),
                (
                    "quote_asset_volume",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Volumen de trading en la vela",
                        max_digits=30,
                        null=True,
                        verbose_name="Volumen de trading en la vela",
                    ),
                ),
                (
                    "taker_buy_base_asset_volume",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Volumen de trading de la vela",
                        max_digits=30,
                        null=True,
                        verbose_name="Volumen de trading de la vela",
                    ),
                ),
                (
                    "number_of_trades",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Número de trades en la vela",
                        max_digits=30,
                        null=True,
                        verbose_name="Número de trades en la vela",
                    ),
                ),
                (
                    "symbol",
                    models.ForeignKey(
                        editable=False,
                        help_text="Símbolo del par de trading",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_query_name="ticker",
                        to="BinanceAPI.symbol",
                        verbose_name="Símbolo del par de trading",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ticker",
                "verbose_name_plural": "Tickers",
                "ordering": ["symbol"],
            },
        ),
        migrations.CreateModel(
            name="OrderBook",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "last_update_id",
                    models.BigIntegerField(
                        blank=True,
                        editable=False,
                        help_text="ID de última actualización del libro de órdenes",
                        null=True,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Fecha y hora de la actualización del libro de órdenes",
                        null=True,
                    ),
                ),
                (
                    "asks",
                    models.JSONField(
                        blank=True,
                        editable=False,
                        help_text="La lista de órdenes de venta (asks) del libro de órdenes.",
                        null=True,
                    ),
                ),
                (
                    "bids",
                    models.JSONField(
                        blank=True,
                        editable=False,
                        help_text="La lista de órdenes de compra (bids) del libro de órdenes.",
                        null=True,
                    ),
                ),
                (
                    "ask_total_volume",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="El volumen total de las órdenes de venta.",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "bid_total_volume",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="El volumen total de las órdenes de compra.",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "spread",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="La diferencia entre el precio más alto de las órdenes de compra y el precio más bajo de las órdenes de venta.",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "liquidity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="La liquidez del par de trading.",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "depth",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="La profundidad del libro de órdenes.",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "asset",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        help_text="Símbolo del par de trading",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="order_books",
                        to="BinanceAPI.asset",
                    ),
                ),
            ],
            options={
                "verbose_name": "Order Book",
                "verbose_name_plural": "Order Books",
            },
        ),
        migrations.CreateModel(
            name="Network",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "network",
                    models.CharField(help_text="Nombre de la red.", max_length=50),
                ),
                (
                    "entity_tag",
                    models.CharField(
                        blank=True,
                        help_text="Etiqueta de entidad.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "withdraw_integer_multiple",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        help_text="Múltiplo entero de retiro.",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "is_default",
                    models.BooleanField(default=False, help_text="Red por defecto."),
                ),
                (
                    "deposit_enable",
                    models.BooleanField(
                        default=False, help_text="Depósito habilitado."
                    ),
                ),
                (
                    "withdraw_enable",
                    models.BooleanField(default=False, help_text="Retiro habilitado."),
                ),
                (
                    "deposit_desc",
                    models.TextField(
                        blank=True, help_text="Descripción de depósito.", null=True
                    ),
                ),
                (
                    "withdraw_desc",
                    models.TextField(
                        blank=True, help_text="Descripción de retiro.", null=True
                    ),
                ),
                (
                    "special_tips",
                    models.TextField(
                        blank=True, help_text="Tips especiales.", null=True
                    ),
                ),
                (
                    "special_withdraw_tips",
                    models.TextField(
                        blank=True, help_text="Tips especiales de retiro.", null=True
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Nombre de la red.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "reset_address_status",
                    models.BooleanField(
                        default=False, help_text="Estado de reinicio de dirección."
                    ),
                ),
                (
                    "address_regex",
                    models.CharField(
                        blank=True,
                        help_text="Expresión regular de dirección.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "address_rule",
                    models.CharField(
                        blank=True,
                        help_text="Regla de dirección.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "memo_regex",
                    models.CharField(
                        blank=True,
                        help_text="Expresión regular de memo.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "withdraw_fee",
                    models.DecimalField(
                        decimal_places=15,
                        help_text="Comisión de retiro.",
                        max_digits=35,
                    ),
                ),
                (
                    "withdraw_min",
                    models.DecimalField(
                        decimal_places=15,
                        help_text="Cantidad mínima de retiro.",
                        max_digits=35,
                    ),
                ),
                (
                    "withdraw_max",
                    models.DecimalField(
                        decimal_places=15,
                        help_text="Cantidad máxima de retiro.",
                        max_digits=35,
                    ),
                ),
                (
                    "min_confirm",
                    models.PositiveIntegerField(help_text="Confirmación mínima."),
                ),
                (
                    "unlock_confirm",
                    models.PositiveIntegerField(
                        help_text="Confirmación de desbloqueo."
                    ),
                ),
                (
                    "same_address",
                    models.BooleanField(default=False, help_text="Misma dirección."),
                ),
                (
                    "estimate_arrival_time",
                    models.PositiveIntegerField(
                        help_text="Tiempo estimado de llegada."
                    ),
                ),
                ("busy", models.BooleanField(default=False, help_text="Ocupado.")),
                (
                    "country",
                    models.CharField(
                        blank=True, help_text="País.", max_length=50, null=True
                    ),
                ),
                (
                    "contract_address_url",
                    models.URLField(
                        blank=True,
                        help_text="Dirección de contrato.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "contract_address",
                    models.CharField(
                        blank=True,
                        help_text="Dirección de contrato.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "coin",
                    models.ForeignKey(
                        blank=True,
                        help_text="Asset al que pertenece este Network.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="networks",
                        related_query_name="network",
                        to="BinanceAPI.asset",
                    ),
                ),
            ],
            options={
                "verbose_name": "Network",
                "verbose_name_plural": "Networks",
            },
        ),
        migrations.AddField(
            model_name="basefilter",
            name="symbol",
            field=models.ForeignKey(
                editable=False,
                help_text="Símbolo del par de trading",
                on_delete=django.db.models.deletion.PROTECT,
                to="BinanceAPI.symbol",
            ),
        ),
        migrations.CreateModel(
            name="BalanceSpot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "free",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Cantidad disponible",
                        max_digits=20,
                    ),
                ),
                (
                    "locked",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Cantidad bloqueada",
                        max_digits=20,
                    ),
                ),
                (
                    "total",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Cantidad total (free + locked)",
                        max_digits=20,
                    ),
                ),
                (
                    "in_order",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        editable=False,
                        help_text="Cantidad en órdenes abiertas",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "asset",
                    models.ForeignKey(
                        editable=False,
                        help_text="Activo",
                        max_length=10,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="BinanceAPI.asset",
                    ),
                ),
            ],
            options={
                "verbose_name": "Balance Spot",
                "verbose_name_plural": "Balances Spot",
            },
        ),
        migrations.CreateModel(
            name="AvgPrice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Fecha y hora de actualización"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Fecha y hora de creación"
                    ),
                ),
                (
                    "mins",
                    models.IntegerField(
                        editable=False,
                        help_text="Minutos de los que se calcula el promedio",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=10,
                        editable=False,
                        help_text="Precio promedio",
                        max_digits=20,
                    ),
                ),
                (
                    "symbol",
                    models.ForeignKey(
                        editable=False,
                        help_text="Activo",
                        max_length=10,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="BinanceAPI.symbol",
                    ),
                ),
            ],
            options={
                "verbose_name": "Precio promedio",
                "verbose_name_plural": "Precios promedios",
                "ordering": ["symbol", "mins"],
            },
        ),
        migrations.AddConstraint(
            model_name="network",
            constraint=models.UniqueConstraint(
                fields=("network", "coin", "name"), name="unique_network_coin"
            ),
        ),
        migrations.AddConstraint(
            model_name="avgprice",
            constraint=models.UniqueConstraint(
                fields=("symbol", "mins"), name="unique_symbol_mins"
            ),
        ),
    ]
